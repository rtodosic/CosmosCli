# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: Build .Net, Version and Release

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    - name: Install Versionize
      run: dotnet tool install --global Versionize
    - name: Install dotnet format
      run: dotnet tool install -g dotnet-format
    - name: Setup git
      run: |
        git config --local user.email "rtodosic@hotmail.com"
        git config --local user.name "Richard Todosichuk"
    - name: Restore dependencies
      run: dotnet restore
    - name: Pack
      run: dotnet pack -c Release
    - name: Undo husky changes
      run: |
        git checkout .husky/commit-msg
        git checkout .husky/pre-commit
    - name: Versionize Release
      id: versionize
      run: versionize --exit-insignificant-commits
      continue-on-error: true
    - name: No release required
      if: steps.versionize.outcome != 'success'
      run: echo "Skipping Release. No release required."
    - name: Push changes to GitHub
      if: steps.versionize.outcome == 'success'
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: ${{ github.ref }}
        tags: true
    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
        body: |
          Release notes for ${{ github.ref }}
  
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./nupkg/CosmosCli*.nupkg
        asset_name: CosmosCli.nupkg
        asset_content_type: application/octet-stream

    - name: Create release
      if: steps.versionize.outcome == 'success'
      uses: 'actions/github-script@v5'
      with:
        github-token: '${{ secrets.GITHUB_TOKEN }}'
        script: |
          try {
            const tags_url = context.payload.repository.tags_url + "?per_page=1"
            const result = await github.request(tags_url)
            const current_tag = result.data[0].name
            await github.rest.repos.createRelease({
              draft: false,
              generate_release_notes: true,
              name: current_tag,
              owner: context.repo.owner,
              prerelease: false,
              repo: context.repo.repo,
              tag_name: current_tag,
            });
          } catch (error) {
            core.setFailed(error.message);
          }
